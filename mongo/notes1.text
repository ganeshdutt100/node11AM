✅ Way 1: Implicit Creation (Most Common)
 Step-by-Step:
1-Switch to a database
Even if it doesn’t exist, MongoDB will create it automatically when you insert data.
- use myDatabase
2 - Insert a document into a collection
The collection will be created automatically.
db.students.insertOne({
  name: "Ganesh",
  course: "Frontend",
  age: 24
})

3 - Check data

db.students.find().pretty()
✅ Output:
- A new database called myDatabase will be created.
- A new collection called students will also be created.
- The document will be inserted.

This method is easy and most commonly used.


✅ Way 2: Explicit Creation (Using createCollection)
Step-by-Step:

1 - Switch to a database
- use myDatabase2

2 -  Create collection manually
- db.createCollection("courses")

3 - Insert data into the collection
db.courses.insertOne({
  title: "JavaScript Mastery",
  duration: "1 month"
})

4 - Check inserted data
- db.courses.find().pretty()

✅ Output:
- A new database myDatabase2 is created.
- A new collection courses is created manually.
- Then data is inserted.
This method is used when you want more control or add validation rules later.



✨ Summary Table
Feature	Implicit Way (Auto)	Explicit Way (Manual)
Use use dbname	Yes	Yes
Create collection	Auto on insert	Manual with createCollection()
Insert data	With insertOne()	After creating collection
Common use	Yes (Beginner-friendly, quick)	Less common, used for validations etc.



🔍 What is _id in MongoDB?
In MongoDB, every document must have a unique _id field.

If you don’t provide it, MongoDB automatically generates an _id using the ObjectId() function.

This _id helps uniquely identify each document in a collection.


🧬 What is ObjectId?

ObjectId is a 12-byte hexadecimal identifier automatically created by MongoDB.
It looks like this: 6851316e279b64cfdd50eb69

🔬 Structure of ObjectId
ObjectId has 12 bytes (24 hex characters), divided as:
Bytes	Length	Description
4	8 chars	Timestamp 
5	10 chars	Machine identifier + Process ID
3	6 chars	Counter (random/incremental)

🔎 Let's decode your ObjectId
Example:
ObjectId("6851316e279b64cfdd50eb69")
Split into:
6851316e → First 4 bytes (timestamp)
279b64cfdd → Machine + process
50eb69 → Counter


🕒 Converting 6851316e to Human Timestamp
Let's convert the first part 6851316e from hex to decimal:
6851316e (hex) = 1753591662 (decimal)
Now convert 1753591662 to human-readable time:
➤ Result:
-  New Date(1753591662  * 100)
Tuesday, June 18, 2025 02:37:42 AM GMT+5:30
This means the document was created on June 18, 2025, at 2:37 AM IST.




✅ Step-by-Step Explanation
Step 1: Understand Hexadecimal

Hexadecimal (or hex) is base-16.

It uses digits:
0, 1, 2, 3, ..., 9, A(10), B(11), ..., F(15)

Step 2: Take your hex number
Hex: 6851316e
This is an 8-digit hex number = 4 bytes
We’ll convert it to decimal (base-10).

Step 3 (a): Use calculator or manual method
🔢 Manual Conversion (Optional to understand deeply)
6851316e = (6 × 16^7) + (8 × 16^6) + (5 × 16^5) + (1 × 16^4) + (3 × 16^3) + (1 × 16^2) + (6 × 16^1) + (14 × 16^0)

           = (6 × 268435456) +
             (8 × 16777216) +
             (5 × 1048576) +
             (1 × 65536) +
             (3 × 4096) +
             (1 × 256) +
             (6 × 16) +
             (14 × 1)

           = 1610612736 + 134217728 + 5242880 + 65536 + 12288 + 256 + 96 + 14
           = **1753591662**
Step 3 (b) -Auto
- parseInt("6851316e", 16)


✅ Final Result:
Hex:      6851316e
Decimal:  1753591662

📅 Bonus: Convert to Timestamp
Use in JS:
new Date(1753591662 * 1000)
// Output: Wed Jun 18 2025 02:37:42 GMT+0530 (India Standard Time)
